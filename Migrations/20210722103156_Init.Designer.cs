// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketingApi.DBContexts;

namespace TicketingApi.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20210722103156_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.App", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("desc");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Apps");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_name");

                    b.ToTable("apps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "Integrated Advertising System",
                            Logo = "Apps/Sysad.jpg",
                            Name = "SysAd"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            Name = "App2"
                        },
                        new
                        {
                            Id = 3,
                            Desc = "",
                            Name = "App3"
                        },
                        new
                        {
                            Id = 4,
                            Desc = "",
                            Name = "APP4"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.KBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppId")
                        .HasColumnType("int")
                        .HasColumnName("app_id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("module_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_KBase");

                    b.ToTable("kbases");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("file_type");

                    b.Property<int>("RelId")
                        .HasColumnType("int")
                        .HasColumnName("rel_id");

                    b.Property<string>("RelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("rel_type");

                    b.Property<int?>("TicketDetailsId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketsId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Media");

                    b.HasIndex("TicketDetailsId");

                    b.HasIndex("TicketsId");

                    b.ToTable("medias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FileName = "Tickets/atc1.jpg",
                            FileType = ".pf",
                            RelId = 1,
                            RelType = "T"
                        },
                        new
                        {
                            Id = 2,
                            FileName = "Tickets/atc2.pdf",
                            FileType = ".pdf",
                            RelId = 1,
                            RelType = "T"
                        },
                        new
                        {
                            Id = 3,
                            FileName = "TicketDetails/atc3.jpeg",
                            FileType = ".jpg",
                            RelId = 1,
                            RelType = "TD"
                        },
                        new
                        {
                            Id = 4,
                            FileName = "TicketsDetails/atc4.xls",
                            FileType = ".xls",
                            RelId = 1,
                            RelType = "TD"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppId")
                        .HasColumnType("int")
                        .HasColumnName("app_id");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("desc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Modules");

                    b.HasIndex("AppId");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_name");

                    b.ToTable("modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppId = 1,
                            Desc = "",
                            Name = "Media"
                        },
                        new
                        {
                            Id = 2,
                            AppId = 1,
                            Desc = "",
                            Name = "Production"
                        },
                        new
                        {
                            Id = 3,
                            AppId = 1,
                            Desc = "",
                            Name = "Finance"
                        },
                        new
                        {
                            Id = 4,
                            AppId = 1,
                            Desc = "",
                            Name = "Others"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.Stat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("color");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("desc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Stat");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_name");

                    b.ToTable("stats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "Green",
                            Desc = "",
                            Name = "New"
                        },
                        new
                        {
                            Id = 2,
                            Color = "Orange",
                            Desc = "",
                            Name = "Open"
                        },
                        new
                        {
                            Id = 3,
                            Color = "Red",
                            Desc = "",
                            Name = "In Progress"
                        },
                        new
                        {
                            Id = 4,
                            Color = "Yellow",
                            Desc = "",
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 5,
                            Color = "Blue",
                            Desc = "",
                            Name = "Solve"
                        },
                        new
                        {
                            Id = 6,
                            Color = "Grey",
                            Desc = "",
                            Name = "Reject"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppId")
                        .HasColumnType("int")
                        .HasColumnName("app_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("module_id");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("rejected_at");

                    b.Property<string>("RejectedBy")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("rejected_by");

                    b.Property<string>("RejectedReason")
                        .HasColumnType("text")
                        .HasColumnName("rejected_reason");

                    b.Property<int>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("sender_id");

                    b.Property<DateTime?>("SolvedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("solved_at");

                    b.Property<string>("SolvedBy")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("solved_by");

                    b.Property<int>("StatId")
                        .HasColumnType("int")
                        .HasColumnName("stat_id");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("supject");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ticket_number");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_Ticket");

                    b.HasIndex("AppId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("SenderId");

                    b.HasIndex("StatId");

                    b.HasIndex("TicketNumber")
                        .HasDatabaseName("idx_TicketNumber");

                    b.ToTable("tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppId = 1,
                            Comment = "lorem ipsu sdkskadn ksdnksin jdnskjdna jsandjkansdjkansd jndsajkdnajkd kasjndsndoqm dolor shit nyoasdasdaslibay knoper low",
                            CreatedAt = new DateTime(2021, 7, 22, 17, 31, 55, 377, DateTimeKind.Local).AddTicks(2714),
                            ModuleId = 1,
                            SenderId = 1,
                            StatId = 3,
                            Subject = "Ini Test Subject satu ",
                            TicketNumber = "180620211",
                            UpdatedAt = new DateTime(2021, 7, 22, 17, 31, 55, 377, DateTimeKind.Local).AddTicks(2731)
                        },
                        new
                        {
                            Id = 2,
                            AppId = 1,
                            Comment = "asdhjkahsdjas jasdjj sjadnajk jasnd jas d asndjka  skjdnaksjdn sshdjkajksdas jashdjkahsjkd oashdasihsjskaslnsk",
                            CreatedAt = new DateTime(2021, 7, 22, 17, 31, 55, 377, DateTimeKind.Local).AddTicks(4920),
                            ModuleId = 1,
                            SenderId = 2,
                            StatId = 1,
                            Subject = "Subject for ticket number 2",
                            TicketNumber = "180620212",
                            UpdatedAt = new DateTime(2021, 7, 22, 17, 31, 55, 377, DateTimeKind.Local).AddTicks(4929)
                        },
                        new
                        {
                            Id = 3,
                            AppId = 1,
                            Comment = "ksknnina  lasklk  klsnklna ksaiopoellss ksdoasjdandanwdwqo sdnskandjasd  jskdnjksanda asndndiqwioqdwq",
                            CreatedAt = new DateTime(2021, 7, 22, 17, 31, 55, 377, DateTimeKind.Local).AddTicks(4932),
                            ModuleId = 1,
                            SenderId = 3,
                            StatId = 1,
                            Subject = "Subjecsdskkks ksnkandkasndk t 3",
                            TicketNumber = "180620213",
                            UpdatedAt = new DateTime(2021, 7, 22, 17, 31, 55, 377, DateTimeKind.Local).AddTicks(4934)
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.TicketAssign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignType")
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("assign_type");

                    b.Property<DateTime?>("TeamAt")
                        .HasColumnType("datetime")
                        .HasColumnName("team_at");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_id");

                    b.Property<DateTime?>("UserAt")
                        .HasColumnType("datetime")
                        .HasColumnName("user_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<bool>("Viewed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("viewed");

                    b.Property<DateTime?>("ViewedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("viewed_at");

                    b.HasKey("Id")
                        .HasName("PK_Ticket_assign");

                    b.HasIndex("TeamId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("ticket_assigns");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignType = "M",
                            TicketId = 1,
                            UserAt = new DateTime(2021, 7, 22, 17, 31, 55, 387, DateTimeKind.Local).AddTicks(516),
                            UserId = 2,
                            Viewed = true,
                            ViewedAt = new DateTime(2021, 7, 22, 17, 31, 55, 387, DateTimeKind.Local).AddTicks(527)
                        },
                        new
                        {
                            Id = 2,
                            AssignType = "T",
                            TeamAt = new DateTime(2021, 7, 22, 17, 31, 55, 387, DateTimeKind.Local).AddTicks(2164),
                            TeamId = 1,
                            TicketId = 1,
                            UserId = 3,
                            Viewed = true,
                            ViewedAt = new DateTime(2021, 7, 22, 17, 31, 55, 387, DateTimeKind.Local).AddTicks(2174)
                        },
                        new
                        {
                            Id = 3,
                            AssignType = "U",
                            TicketId = 1,
                            UserAt = new DateTime(2021, 7, 22, 17, 31, 55, 387, DateTimeKind.Local).AddTicks(3650),
                            UserId = 4,
                            Viewed = true,
                            ViewedAt = new DateTime(2021, 7, 22, 17, 31, 55, 387, DateTimeKind.Local).AddTicks(3657)
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.TicketDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<bool>("Flag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("flag");

                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_Ticket_details");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("ticket_details");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "lorem ipsum dolor shit nyolibay kksdj nknop ksiola knoper low",
                            CreatedAt = new DateTime(2021, 7, 22, 17, 31, 55, 385, DateTimeKind.Local).AddTicks(9096),
                            TicketId = 1,
                            UpdatedAt = new DateTime(2021, 7, 22, 17, 31, 55, 385, DateTimeKind.Local).AddTicks(9117),
                            UserId = 4
                        },
                        new
                        {
                            Id = 2,
                            Comment = "asdhjkahsdjas jasshdjkajksdas jashdjkahsjkd oashdasihsjskaslnsk",
                            CreatedAt = new DateTime(2021, 7, 22, 17, 31, 55, 386, DateTimeKind.Local).AddTicks(720),
                            TicketId = 1,
                            UpdatedAt = new DateTime(2021, 7, 22, 17, 31, 55, 386, DateTimeKind.Local).AddTicks(731)
                        },
                        new
                        {
                            Id = 3,
                            Comment = "ksknnina  lasklk  klsnklna ksaiopoells;mlauw klnskoiskel aksnkadia mkaskks ",
                            CreatedAt = new DateTime(2021, 7, 22, 17, 31, 55, 386, DateTimeKind.Local).AddTicks(1977),
                            TicketId = 1,
                            UpdatedAt = new DateTime(2021, 7, 22, 17, 31, 55, 386, DateTimeKind.Local).AddTicks(1986),
                            UserId = 4
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("desc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Depatments");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_name");

                    b.ToTable("departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "",
                            Name = "Management"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            Name = "CS"
                        },
                        new
                        {
                            Id = 3,
                            Desc = "",
                            Name = "Programmer"
                        },
                        new
                        {
                            Id = 4,
                            Desc = "",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("desc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Roles");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_name");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "",
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            Desc = "",
                            Name = "Leader"
                        },
                        new
                        {
                            Id = 4,
                            Desc = "",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Sender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("image");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<bool?>("LoginStatus")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("login_status");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("salt");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_Sender");

                    b.HasIndex("Email")
                        .HasDatabaseName("idx_sender");

                    b.ToTable("senders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 7, 22, 17, 31, 55, 372, DateTimeKind.Local).AddTicks(8490),
                            Email = "daniel@epsylonhome.com",
                            FirstName = "Daniel",
                            Image = "Users/daniel.jpg",
                            LastName = "Radcliff",
                            Password = "",
                            Salt = ""
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2021, 7, 22, 17, 31, 55, 372, DateTimeKind.Local).AddTicks(8522),
                            Email = "ruppert@gmail.com",
                            FirstName = "Ruppert",
                            Image = "Users/ruppert.jpg",
                            LastName = "Grint",
                            Password = "",
                            Salt = ""
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2021, 7, 22, 17, 31, 55, 372, DateTimeKind.Local).AddTicks(9227),
                            Email = "emma@gmail.com",
                            FirstName = "Emma",
                            Image = "Users/emma.jpg",
                            LastName = "Watson",
                            LoginStatus = true,
                            Password = "D4DBF83B073AC6E9BDC94B6B872657DD47D23B1DC42BC72D00B06EA76E3B3B45C85B213C33C0096B82E0954E30D3C2178E7F8FEF5037700AE8E945CDC9018DBA",
                            Salt = "3f532883-bcc5-40d5-8f42-5fdf5e241a51"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("desc");

                    b.Property<int>("LeaderId")
                        .HasColumnType("int")
                        .HasColumnName("leader_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id")
                        .HasName("PK_Teams");

                    b.HasIndex("LeaderId");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_name");

                    b.ToTable("teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "",
                            LeaderId = 4,
                            Name = "TEAM CAP"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.TeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_Team_Members");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("team_members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TeamId = 1,
                            UserId = 6
                        },
                        new
                        {
                            Id = 2,
                            TeamId = 1,
                            UserId = 7
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("image");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("salt");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_Users");

                    b.HasIndex("Email")
                        .HasDatabaseName("idx_email");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 7, 22, 17, 31, 55, 366, DateTimeKind.Local).AddTicks(6455),
                            Email = "vicky.indiarto@epsylonhome.com",
                            FirstName = "Vicky",
                            Image = "Users/vicky.jpg",
                            LastName = "Epsylon",
                            Password = "10FD0607D57BC447945DAF5B0F5E7DA9EAFE144E3F853447DE443951FDE6DE46E1C6DF29B9FAEA0E4E2BC605A153A8AAEAC49AF81D73B391481EF9688206F47F",
                            Salt = "3f532883-bcc5-40d5-8f42-5fdf5e241a51"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2021, 7, 22, 17, 31, 55, 366, DateTimeKind.Local).AddTicks(9302),
                            Email = "vickyindiarto@gmail.com",
                            FirstName = "Crish",
                            Image = "Users/crish.jpg",
                            LastName = "Evans",
                            Password = "BCAFF0132B92027CB20845D7B8F7E02A66A1B11FA0E4E0A8ECC114D66DC196D37AEBE290EA32433F0F7A412248786AB85A27CBA9419465A14DC60FDD30613CBE",
                            Salt = "3f532883-bcc5-40d5-8f42-5fdf5e241a51"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2021, 7, 22, 17, 31, 55, 366, DateTimeKind.Local).AddTicks(9835),
                            Email = "vickynewonline@gmail.com",
                            FirstName = "Mark",
                            Image = "Users/mark.jpg",
                            LastName = "Ruffalo",
                            Password = "52C36130A9F843D088724E5EBDB0737CFA343969BA50ADEC2A37E3EEBE369D2C9CDCBC09F6EAA7AE74A061870FF9605D6289C58C2FC7679AB072A813876D1A05",
                            Salt = "3f532883-bcc5-40d5-8f42-5fdf5e241a51"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2021, 7, 22, 17, 31, 55, 367, DateTimeKind.Local).AddTicks(365),
                            Email = "vickyindiar@yahoo.com",
                            FirstName = "Robert",
                            Image = "Users/robert.jpg",
                            LastName = "Downy",
                            Password = "6280CC9C7617836A54E71415E03A6D8EE21724524F2F3A152EF80C29A207F95AFA8D0CA7CDF73817552A544A7156B6FAA144F3C58B77A37B1E03BC2CFD51D95E",
                            Salt = "3f532883-bcc5-40d5-8f42-5fdf5e241a51"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2021, 7, 22, 17, 31, 55, 367, DateTimeKind.Local).AddTicks(863),
                            Email = "vickyindiarx@yahoo.com",
                            FirstName = "Tom",
                            Image = "Users/tom.jpg",
                            LastName = "Holan",
                            Password = "8F17F616697882E5451FF270DCC4660015E259B88F9EF25D127FE350DA2976F8758C30126FD10EC3D4C9DCFEA4CFDB60B178B2606E0FB13F42390ECDE481CF90",
                            Salt = "3f532883-bcc5-40d5-8f42-5fdf5e241a51"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2021, 7, 22, 17, 31, 55, 367, DateTimeKind.Local).AddTicks(1370),
                            Email = "vickyindiary@yahoo.com",
                            FirstName = "Scarlett",
                            LastName = "Johansson",
                            Password = "D8D86394D2F363E8C122D416ABD2E2124E82CA1AE3911E5A4E7A8B853C84A27CC628CAC0E6E1D22E3EA4AA1F380FC0857DD1CA0D9531BE08CAB733C704756C84",
                            Salt = "3f532883-bcc5-40d5-8f42-5fdf5e241a51"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2021, 7, 22, 17, 31, 55, 367, DateTimeKind.Local).AddTicks(3617),
                            Email = "vickyindiarz@yahoo.com",
                            FirstName = "Jeremy",
                            LastName = "Renner",
                            Password = "3756816E5B79280EC30A3B615C2862EB91AA53A2587B86B681002A3A84359307A7C20D327FFF46FCBC369AC6C64852CD144F6A7DEC6AA8719CE6750581940443",
                            Salt = "3f532883-bcc5-40d5-8f42-5fdf5e241a51"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.UserDept", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("dept_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_UserDepts");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_userid");

                    b.ToTable("user_depatments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            DepartmentId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 5,
                            DepartmentId = 2,
                            UserId = 4
                        },
                        new
                        {
                            Id = 6,
                            DepartmentId = 3,
                            UserId = 5
                        },
                        new
                        {
                            Id = 7,
                            DepartmentId = 2,
                            UserId = 6
                        },
                        new
                        {
                            Id = 8,
                            DepartmentId = 2,
                            UserId = 7
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_UserRoles");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_userid");

                    b.ToTable("user_roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            RoleId = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            RoleId = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 5,
                            RoleId = 3,
                            UserId = 4
                        },
                        new
                        {
                            Id = 6,
                            RoleId = 3,
                            UserId = 5
                        },
                        new
                        {
                            Id = 7,
                            RoleId = 4,
                            UserId = 6
                        },
                        new
                        {
                            Id = 8,
                            RoleId = 4,
                            UserId = 7
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.Media", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Tickets.TicketDetail", "TicketDetails")
                        .WithMany("Medias")
                        .HasForeignKey("TicketDetailsId");

                    b.HasOne("TicketingApi.Models.v1.Tickets.Ticket", "Tickets")
                        .WithMany("Medias")
                        .HasForeignKey("TicketsId");

                    b.Navigation("TicketDetails");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.Module", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Misc.App", null)
                        .WithMany("Modules")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.Ticket", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Misc.App", "Apps")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Misc.Module", "Modules")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.Sender", "Senders")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Tickets.Stat", "Status")
                        .WithMany("Tickets")
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apps");

                    b.Navigation("Modules");

                    b.Navigation("Senders");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.TicketAssign", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Users.Team", "Teams")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TicketingApi.Models.v1.Tickets.Ticket", null)
                        .WithMany("TicketAssigns")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Teams");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.TicketDetail", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Tickets.Ticket", null)
                        .WithMany("TicketDetails")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Team", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Users.User", "Leader")
                        .WithMany("Teams")
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.TeamMember", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Users.Team", "Teams")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.User", "Users")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teams");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.UserDept", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Users.Department", "Departments")
                        .WithMany("UserDepts")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.User", null)
                        .WithMany("UserDepts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.UserRole", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Users.Role", "Roles")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.App", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.Stat", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.Ticket", b =>
                {
                    b.Navigation("Medias");

                    b.Navigation("TicketAssigns");

                    b.Navigation("TicketDetails");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.TicketDetail", b =>
                {
                    b.Navigation("Medias");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Department", b =>
                {
                    b.Navigation("UserDepts");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Team", b =>
                {
                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.User", b =>
                {
                    b.Navigation("TeamMembers");

                    b.Navigation("Teams");

                    b.Navigation("UserDepts");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}

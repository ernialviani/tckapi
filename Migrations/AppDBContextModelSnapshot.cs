// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketingApi.DBContexts;

namespace TicketingApi.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.App", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("desc");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Apps");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_name");

                    b.ToTable("apps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "Integrated Advertising System",
                            Name = "SysAd"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            Name = "App2"
                        },
                        new
                        {
                            Id = 3,
                            Desc = "",
                            Name = "App3"
                        },
                        new
                        {
                            Id = 4,
                            Desc = "",
                            Name = "APP4"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.KBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppId")
                        .HasColumnType("int")
                        .HasColumnName("app_id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("module_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_KBase");

                    b.ToTable("kbases");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("file_type");

                    b.Property<int>("RelId")
                        .HasColumnType("int")
                        .HasColumnName("rel_id");

                    b.Property<string>("RelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("rel_type");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Media");

                    b.HasIndex("TicketId");

                    b.ToTable("medias");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppId")
                        .HasColumnType("int")
                        .HasColumnName("app_id");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("desc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Modules");

                    b.HasIndex("AppId");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_name");

                    b.ToTable("modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppId = 1,
                            Desc = "",
                            Name = "Media"
                        },
                        new
                        {
                            Id = 2,
                            AppId = 1,
                            Desc = "",
                            Name = "Production"
                        },
                        new
                        {
                            Id = 3,
                            AppId = 1,
                            Desc = "",
                            Name = "Finance"
                        },
                        new
                        {
                            Id = 4,
                            AppId = 1,
                            Desc = "",
                            Name = "Others"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.Stat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("color");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("desc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Stat");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_name");

                    b.ToTable("stats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "Green",
                            Desc = "",
                            Name = "New"
                        },
                        new
                        {
                            Id = 2,
                            Color = "Orange",
                            Desc = "",
                            Name = "Open"
                        },
                        new
                        {
                            Id = 3,
                            Color = "Red",
                            Desc = "",
                            Name = "In Progress"
                        },
                        new
                        {
                            Id = 4,
                            Color = "Blue",
                            Desc = "",
                            Name = "Resolved"
                        },
                        new
                        {
                            Id = 5,
                            Color = "Grey",
                            Desc = "",
                            Name = "Rejected"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppId")
                        .HasColumnType("int")
                        .HasColumnName("app_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("module_id");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RejectedBy")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("rejected_by");

                    b.Property<string>("RejectedReason")
                        .HasColumnType("text")
                        .HasColumnName("rejected_reason");

                    b.Property<int>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("sender_id");

                    b.Property<DateTime?>("SolvedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SolvedBy")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("solved_by");

                    b.Property<int>("StatId")
                        .HasColumnType("int")
                        .HasColumnName("stat_id");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("supject");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ticket_number");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_Ticket");

                    b.HasIndex("AppId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("SenderId");

                    b.HasIndex("StatId");

                    b.HasIndex("TicketNumber")
                        .HasDatabaseName("idx_TicketNumber");

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.TicketAssign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignType")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("TeamAt")
                        .HasColumnType("datetime")
                        .HasColumnName("team_at");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_id");

                    b.Property<DateTime?>("UserAt")
                        .HasColumnType("datetime")
                        .HasColumnName("user_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_Ticket_assign");

                    b.HasIndex("TicketId");

                    b.ToTable("ticket_assigns");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.TicketDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<bool>("Flag")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("flag");

                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_Ticket_details");

                    b.HasIndex("TicketId");

                    b.ToTable("ticket_details");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("desc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Depatments");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_name");

                    b.ToTable("departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "",
                            Name = "Management"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            Name = "CS"
                        },
                        new
                        {
                            Id = 3,
                            Desc = "",
                            Name = "Programmer"
                        },
                        new
                        {
                            Id = 4,
                            Desc = "",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("desc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Roles");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_name");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "",
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            Name = "Leader"
                        },
                        new
                        {
                            Id = 3,
                            Desc = "",
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 4,
                            Desc = "",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Sender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("image");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<bool?>("LoginStatus")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("login_status");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("salt");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_Sender");

                    b.HasIndex("Email")
                        .HasDatabaseName("idx_sender");

                    b.ToTable("senders");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("desc");

                    b.Property<int>("LeaderId")
                        .HasColumnType("int")
                        .HasColumnName("leader_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id")
                        .HasName("PK_Teams");

                    b.HasIndex("LeaderId");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_name");

                    b.ToTable("teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "",
                            LeaderId = 1,
                            Name = "TEAM CAP"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.TeamDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MemberId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("member_id");

                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("team_id");

                    b.HasKey("Id")
                        .HasName("PK_Teams_details");

                    b.HasIndex("MemberId");

                    b.HasIndex("TeamId");

                    b.ToTable("team_details");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("image");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("salt");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_Users");

                    b.HasIndex("Email")
                        .HasDatabaseName("idx_email");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 6, 27, 23, 17, 35, 447, DateTimeKind.Local).AddTicks(5952),
                            Email = "vicky.indiarto@epsylonhome.com",
                            FirstName = "vicky",
                            LastName = "Epsylon",
                            Password = "85C39E98FDF8E6249DCB1A062309D3BDF6AA3A3325664052C53DF628F69B9D6EBDF9BA059254E4F447795BCA03378B5052B59552C27E366EC2F2BCA48AE5D14D",
                            Salt = "197ceef4-8b82-4e88-a06c-fb38317dfc77"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.UserDept", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("dept_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_UserDepts");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_userid");

                    b.ToTable("user_depatments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 3,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_UserRoles");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_userid");

                    b.ToTable("user_roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            RoleId = 4,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.Media", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Tickets.Ticket", null)
                        .WithMany("Medias")
                        .HasForeignKey("TicketId");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.Module", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Misc.App", null)
                        .WithMany("Modules")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.Ticket", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Misc.App", "Apps")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Misc.Module", "Modules")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.Sender", "Senders")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Tickets.Stat", "Status")
                        .WithMany("Tickets")
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apps");

                    b.Navigation("Modules");

                    b.Navigation("Senders");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.TicketAssign", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Tickets.Ticket", null)
                        .WithMany("TicketAssigns")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.TicketDetail", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Tickets.Ticket", null)
                        .WithMany("TicketDetails")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Team", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Users.User", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.TeamDetail", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Users.User", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.Team", "Team")
                        .WithMany("TeamDetails")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.UserDept", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Users.Department", "Departments")
                        .WithMany("UserDepts")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.User", "Users")
                        .WithMany("UserDepts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.UserRole", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Users.Role", "Roles")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.User", "Users")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.App", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.Stat", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.Ticket", b =>
                {
                    b.Navigation("Medias");

                    b.Navigation("TicketAssigns");

                    b.Navigation("TicketDetails");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Department", b =>
                {
                    b.Navigation("UserDepts");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Team", b =>
                {
                    b.Navigation("TeamDetails");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.User", b =>
                {
                    b.Navigation("UserDepts");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}

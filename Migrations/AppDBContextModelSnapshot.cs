// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketingApi.DBContexts;

namespace TicketingApi.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("TicketingApi.Models.v1.CLogs.CLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppId")
                        .HasColumnType("int")
                        .HasColumnName("app_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Desc")
                        .HasColumnType("text")
                        .HasColumnName("desc");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("PK_CLog");

                    b.HasIndex("AppId");

                    b.HasIndex("UserId");

                    b.ToTable("clogs");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.CLogs.CLogDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CLogId")
                        .HasColumnType("int")
                        .HasColumnName("clog_id");

                    b.Property<int>("CLogTypeId")
                        .HasColumnType("int")
                        .HasColumnName("clog_type_id");

                    b.Property<string>("Desc")
                        .HasColumnType("text")
                        .HasColumnName("desc");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("module_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("PK_CLog_Detail");

                    b.HasIndex("CLogId");

                    b.HasIndex("CLogTypeId");

                    b.HasIndex("ModuleId");

                    b.ToTable("clog_details");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.CLogs.CLogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("color");

                    b.Property<string>("Desc")
                        .HasColumnType("text")
                        .HasColumnName("desc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_CLog_Type");

                    b.ToTable("clog_type");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "Blue",
                            Name = "New"
                        },
                        new
                        {
                            Id = 2,
                            Color = "Orange",
                            Name = "Fix"
                        },
                        new
                        {
                            Id = 3,
                            Color = "Green",
                            Name = "Enhance"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.App", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("desc");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Apps");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_name");

                    b.ToTable("apps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "Integrated Advertising System",
                            Logo = "Apps/Sysad.jpg",
                            Name = "SysAd"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.ClientDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientGroupId")
                        .HasColumnType("int")
                        .HasColumnName("client_group_id");

                    b.Property<string>("Desc")
                        .HasColumnType("text")
                        .HasColumnName("desc");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("domain");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_ClientDetails");

                    b.HasIndex("ClientGroupId");

                    b.ToTable("client_details");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.ClientGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("text")
                        .HasColumnName("desc");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("domain");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_ClientGroups");

                    b.ToTable("client_groups");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.Faq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppId")
                        .HasColumnType("int")
                        .HasColumnName("app_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("desc");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("module_id");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_Faqs");

                    b.ToTable("faqs");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.KBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppId")
                        .HasColumnType("int")
                        .HasColumnName("app_id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("module_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_KBase");

                    b.ToTable("kbases");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CLogDetailId")
                        .HasColumnType("int")
                        .HasColumnName("clog_detail_id");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("file_type");

                    b.Property<int?>("KbaseId")
                        .HasColumnType("int")
                        .HasColumnName("kbase_id");

                    b.Property<int>("RelId")
                        .HasColumnType("int")
                        .HasColumnName("rel_id");

                    b.Property<string>("RelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("rel_type");

                    b.Property<int?>("TicketDetailId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_detail_id");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_id");

                    b.HasKey("Id")
                        .HasName("PK_Media");

                    b.HasIndex("CLogDetailId");

                    b.HasIndex("KbaseId");

                    b.HasIndex("TicketDetailId");

                    b.HasIndex("TicketId");

                    b.ToTable("medias");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppId")
                        .HasColumnType("int")
                        .HasColumnName("app_id");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("desc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Modules");

                    b.HasIndex("AppId");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_name");

                    b.ToTable("modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppId = 1,
                            Desc = "",
                            Name = "Media"
                        },
                        new
                        {
                            Id = 2,
                            AppId = 1,
                            Desc = "",
                            Name = "Production"
                        },
                        new
                        {
                            Id = 3,
                            AppId = 1,
                            Desc = "",
                            Name = "Finance"
                        },
                        new
                        {
                            Id = 4,
                            AppId = 1,
                            Desc = "",
                            Name = "Others"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.Verification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Desc")
                        .HasColumnType("text")
                        .HasColumnName("desc");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("ExpiredAt")
                        .IsRequired()
                        .HasColumnType("datetime")
                        .HasColumnName("expired_at");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("sender_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<bool?>("Verified")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("verified");

                    b.HasKey("Id")
                        .HasName("PK_Verifications");

                    b.ToTable("verifications");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Notifications.Notif", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Link")
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<string>("Message")
                        .HasColumnType("longtext")
                        .HasColumnName("message");

                    b.Property<int>("NotifRegisterId")
                        .HasColumnType("int")
                        .HasColumnName("notif_register_id");

                    b.Property<string>("NtfData")
                        .HasColumnType("longtext");

                    b.Property<string>("NtfType")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ntf_type");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<bool>("Viewed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("viewed");

                    b.HasKey("Id")
                        .HasName("PK_Notifs");

                    b.HasIndex("NotifRegisterId");

                    b.ToTable("notifs");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Notifications.NotifRegister", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Browser")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("browser");

                    b.Property<string>("BrowserVersion")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("browser_version");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("FcmToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fcm_token");

                    b.Property<string>("Os")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("os");

                    b.Property<string>("OsVersion")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("os_version");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("sender_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_Notif_registers");

                    b.HasIndex("UserId");

                    b.ToTable("notif_registers");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.Stat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("color");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("desc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Stat");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_name");

                    b.ToTable("stats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "Red",
                            Desc = "bg-danger",
                            Name = "New"
                        },
                        new
                        {
                            Id = 2,
                            Color = "Sky",
                            Desc = "bg-info",
                            Name = "Open"
                        },
                        new
                        {
                            Id = 3,
                            Color = "Blue",
                            Desc = "bg-primary",
                            Name = "In Progress"
                        },
                        new
                        {
                            Id = 4,
                            Color = "Yellow",
                            Desc = "bg-warning",
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 5,
                            Color = "Green",
                            Desc = "bg-success",
                            Name = "Solve"
                        },
                        new
                        {
                            Id = 6,
                            Color = "Grey",
                            Desc = "bg-dark",
                            Name = "Reject"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppId")
                        .HasColumnType("int")
                        .HasColumnName("app_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("module_id");

                    b.Property<DateTime?>("PendingAt")
                        .HasColumnType("datetime")
                        .HasColumnName("pending_at");

                    b.Property<string>("PendingBy")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("pending_by");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("rejected_at");

                    b.Property<string>("RejectedBy")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("rejected_by");

                    b.Property<string>("RejectedReason")
                        .HasColumnType("text")
                        .HasColumnName("rejected_reason");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("sender_id");

                    b.Property<DateTime?>("SolvedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("solved_at");

                    b.Property<string>("SolvedBy")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("solved_by");

                    b.Property<int>("StatId")
                        .HasColumnType("int")
                        .HasColumnName("stat_id");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ticket_number");

                    b.Property<string>("TicketType")
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("ticket_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_Ticket");

                    b.HasIndex("AppId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("SenderId");

                    b.HasIndex("StatId");

                    b.HasIndex("TicketNumber")
                        .HasDatabaseName("idx_TicketNumber");

                    b.HasIndex("UserId");

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.TicketAssign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignType")
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("assign_type");

                    b.Property<DateTime?>("TeamAt")
                        .HasColumnType("datetime")
                        .HasColumnName("team_at");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_id");

                    b.Property<DateTime?>("UserAt")
                        .HasColumnType("datetime")
                        .HasColumnName("user_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<bool>("Viewed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("viewed");

                    b.Property<DateTime?>("ViewedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("viewed_at");

                    b.HasKey("Id")
                        .HasName("PK_Ticket_assign");

                    b.HasIndex("TeamId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("ticket_assigns");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.TicketDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<bool>("Flag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("flag");

                    b.Property<bool>("Private")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("private");

                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_Ticket_details");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("ticket_details");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("desc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Depatments");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_name");

                    b.ToTable("departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "",
                            Name = "Management"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            Name = "CS"
                        },
                        new
                        {
                            Id = 3,
                            Desc = "",
                            Name = "Programmer"
                        },
                        new
                        {
                            Id = 4,
                            Desc = "",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("desc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Roles");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_name");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "",
                            Name = "Super Admin"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            Name = "Leader"
                        },
                        new
                        {
                            Id = 3,
                            Desc = "",
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 4,
                            Desc = "",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Sender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("image");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<bool?>("LoginStatus")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("login_status");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("salt");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_Sender");

                    b.HasIndex("Email")
                        .HasDatabaseName("idx_sender");

                    b.ToTable("senders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#d9e868",
                            CreatedAt = new DateTime(2021, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "aclientsatu@gmail.com",
                            FirstName = "AClient",
                            LastName = "Satu",
                            Password = "",
                            Salt = ""
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("color");

                    b.Property<string>("CreateBy")
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("desc");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("image");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_Teams");

                    b.HasIndex("ManagerId");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_name");

                    b.ToTable("teams");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.TeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_Team_Members");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("team_members");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("image");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("salt");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_Users");

                    b.HasIndex("Email")
                        .HasDatabaseName("idx_email");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "adminsuper@epsylonhome.com",
                            FirstName = "Admin",
                            Image = "Users/adminsuper.jpg",
                            LastName = "Super",
                            Password = "407CEFA8AD88C93B16D48CB8303F0585C2F78B93679C6AD301C536DA16A9D1523E20E4AF705AF4EB5A843BB8076B60494B7665C11A18412265948CA475E584E9",
                            Salt = "a38f49ef-23ef-424b-81ed-7e55cc32e512"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.UserDept", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("dept_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_UserDepts");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_userid");

                    b.ToTable("user_depatments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_UserRoles");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_userid");

                    b.ToTable("user_roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.CLogs.CLog", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Misc.App", "Apps")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apps");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.CLogs.CLogDetail", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.CLogs.CLog", "CLogs")
                        .WithMany("CLogDetails")
                        .HasForeignKey("CLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.CLogs.CLogType", "CLogTypes")
                        .WithMany("CLogDetails")
                        .HasForeignKey("CLogTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Misc.Module", "Modules")
                        .WithMany()
                        .HasForeignKey("ModuleId");

                    b.Navigation("CLogs");

                    b.Navigation("CLogTypes");

                    b.Navigation("Modules");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.ClientDetail", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Misc.ClientGroup", "ClientGroup")
                        .WithMany("ClientDetails")
                        .HasForeignKey("ClientGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientGroup");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.Media", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.CLogs.CLogDetail", null)
                        .WithMany("Medias")
                        .HasForeignKey("CLogDetailId");

                    b.HasOne("TicketingApi.Models.v1.Misc.KBase", null)
                        .WithMany("Medias")
                        .HasForeignKey("KbaseId");

                    b.HasOne("TicketingApi.Models.v1.Tickets.TicketDetail", "TicketDetails")
                        .WithMany("Medias")
                        .HasForeignKey("TicketDetailId");

                    b.HasOne("TicketingApi.Models.v1.Tickets.Ticket", "Tickets")
                        .WithMany("Medias")
                        .HasForeignKey("TicketId");

                    b.Navigation("TicketDetails");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.Module", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Misc.App", null)
                        .WithMany("Modules")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Notifications.Notif", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Notifications.NotifRegister", null)
                        .WithMany("Notifs")
                        .HasForeignKey("NotifRegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Notifications.NotifRegister", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Users.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.Ticket", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Misc.App", "Apps")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Misc.Module", "Modules")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.Sender", "Senders")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.HasOne("TicketingApi.Models.v1.Tickets.Stat", "Status")
                        .WithMany("Tickets")
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Apps");

                    b.Navigation("Modules");

                    b.Navigation("Senders");

                    b.Navigation("Status");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.TicketAssign", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Users.Team", "Teams")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TicketingApi.Models.v1.Tickets.Ticket", null)
                        .WithMany("TicketAssigns")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Teams");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.TicketDetail", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Tickets.Ticket", null)
                        .WithMany("TicketDetails")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Team", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Users.User", "Manager")
                        .WithMany("Teams")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.TeamMember", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Users.Team", "Teams")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.User", "Users")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teams");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.UserDept", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Users.Department", "Departments")
                        .WithMany("UserDepts")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.User", null)
                        .WithMany("UserDepts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.UserRole", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Users.Role", "Roles")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.CLogs.CLog", b =>
                {
                    b.Navigation("CLogDetails");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.CLogs.CLogDetail", b =>
                {
                    b.Navigation("Medias");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.CLogs.CLogType", b =>
                {
                    b.Navigation("CLogDetails");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.App", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.ClientGroup", b =>
                {
                    b.Navigation("ClientDetails");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.KBase", b =>
                {
                    b.Navigation("Medias");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Notifications.NotifRegister", b =>
                {
                    b.Navigation("Notifs");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.Stat", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.Ticket", b =>
                {
                    b.Navigation("Medias");

                    b.Navigation("TicketAssigns");

                    b.Navigation("TicketDetails");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.TicketDetail", b =>
                {
                    b.Navigation("Medias");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Department", b =>
                {
                    b.Navigation("UserDepts");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Team", b =>
                {
                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.User", b =>
                {
                    b.Navigation("TeamMembers");

                    b.Navigation("Teams");

                    b.Navigation("UserDepts");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}

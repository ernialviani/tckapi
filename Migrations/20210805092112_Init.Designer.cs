// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketingApi.DBContexts;

namespace TicketingApi.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20210805092112_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.App", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("desc");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Apps");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_name");

                    b.ToTable("apps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "Integrated Advertising System",
                            Logo = "Apps/Sysad.jpg",
                            Name = "SysAd"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            Name = "App2"
                        },
                        new
                        {
                            Id = 3,
                            Desc = "",
                            Name = "App3"
                        },
                        new
                        {
                            Id = 4,
                            Desc = "",
                            Name = "APP4"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.KBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppId")
                        .HasColumnType("int")
                        .HasColumnName("app_id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("module_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_KBase");

                    b.ToTable("kbases");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("file_name");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("file_type");

                    b.Property<int>("RelId")
                        .HasColumnType("int")
                        .HasColumnName("rel_id");

                    b.Property<string>("RelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("rel_type");

                    b.Property<int?>("TicketDetailsId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketsId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Media");

                    b.HasIndex("TicketDetailsId");

                    b.HasIndex("TicketsId");

                    b.ToTable("medias");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppId")
                        .HasColumnType("int")
                        .HasColumnName("app_id");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("desc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Modules");

                    b.HasIndex("AppId");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_name");

                    b.ToTable("modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppId = 1,
                            Desc = "",
                            Name = "Media"
                        },
                        new
                        {
                            Id = 2,
                            AppId = 1,
                            Desc = "",
                            Name = "Production"
                        },
                        new
                        {
                            Id = 3,
                            AppId = 1,
                            Desc = "",
                            Name = "Finance"
                        },
                        new
                        {
                            Id = 4,
                            AppId = 1,
                            Desc = "",
                            Name = "Others"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.Stat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("color");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("desc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Stat");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_name");

                    b.ToTable("stats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "Red",
                            Desc = "bg-danger",
                            Name = "New"
                        },
                        new
                        {
                            Id = 2,
                            Color = "Sky",
                            Desc = "bg-info",
                            Name = "Open"
                        },
                        new
                        {
                            Id = 3,
                            Color = "Blue",
                            Desc = "bg-primary",
                            Name = "In Progress"
                        },
                        new
                        {
                            Id = 4,
                            Color = "Yellow",
                            Desc = "bg-warning",
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 5,
                            Color = "Green",
                            Desc = "bg-success",
                            Name = "Solve"
                        },
                        new
                        {
                            Id = 6,
                            Color = "Grey",
                            Desc = "bg-dark",
                            Name = "Reject"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppId")
                        .HasColumnType("int")
                        .HasColumnName("app_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("module_id");

                    b.Property<DateTime?>("PendingAt")
                        .HasColumnType("datetime")
                        .HasColumnName("pending_at");

                    b.Property<string>("PendingBy")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("pending_by");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("rejected_at");

                    b.Property<string>("RejectedBy")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("rejected_by");

                    b.Property<string>("RejectedReason")
                        .HasColumnType("text")
                        .HasColumnName("rejected_reason");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("sender_id");

                    b.Property<DateTime?>("SolvedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("solved_at");

                    b.Property<string>("SolvedBy")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("solved_by");

                    b.Property<int>("StatId")
                        .HasColumnType("int")
                        .HasColumnName("stat_id");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ticket_number");

                    b.Property<string>("TicketType")
                        .HasColumnType("nvarchar(1)")
                        .HasColumnName("ticket_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_Ticket");

                    b.HasIndex("AppId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("SenderId");

                    b.HasIndex("StatId");

                    b.HasIndex("TicketNumber")
                        .HasDatabaseName("idx_TicketNumber");

                    b.HasIndex("UserId");

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.TicketAssign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignType")
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("assign_type");

                    b.Property<DateTime?>("TeamAt")
                        .HasColumnType("datetime")
                        .HasColumnName("team_at");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_id");

                    b.Property<DateTime?>("UserAt")
                        .HasColumnType("datetime")
                        .HasColumnName("user_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<bool>("Viewed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("viewed");

                    b.Property<DateTime?>("ViewedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("viewed_at");

                    b.HasKey("Id")
                        .HasName("PK_Ticket_assign");

                    b.HasIndex("TeamId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("ticket_assigns");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.TicketDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<bool>("Flag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("flag");

                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("ticket_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_Ticket_details");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("ticket_details");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("desc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Depatments");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_name");

                    b.ToTable("departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "",
                            Name = "Management"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            Name = "CS"
                        },
                        new
                        {
                            Id = 3,
                            Desc = "",
                            Name = "Programmer"
                        },
                        new
                        {
                            Id = 4,
                            Desc = "",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("desc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK_Roles");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_name");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "",
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            Desc = "",
                            Name = "Leader"
                        },
                        new
                        {
                            Id = 4,
                            Desc = "",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Sender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("image");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<bool?>("LoginStatus")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("login_status");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("salt");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_Sender");

                    b.HasIndex("Email")
                        .HasDatabaseName("idx_sender");

                    b.ToTable("senders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 8, 5, 16, 21, 11, 419, DateTimeKind.Local).AddTicks(808),
                            Email = "aclientsatu@gmail.com",
                            FirstName = "AClient",
                            Image = "Users/aclientsatu.jpg",
                            LastName = "Satu",
                            Password = "",
                            Salt = ""
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2021, 8, 5, 16, 21, 11, 419, DateTimeKind.Local).AddTicks(808),
                            Email = "bclientdua@gmail.com",
                            FirstName = "BClient",
                            Image = "Users/bclientdua.jpg",
                            LastName = "Dua",
                            Password = "",
                            Salt = ""
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2021, 8, 5, 16, 21, 11, 419, DateTimeKind.Local).AddTicks(808),
                            Email = "cclienttiga@gmail.com",
                            FirstName = "CClient",
                            Image = "Users/cclienttiga.jpg",
                            LastName = "Tiga",
                            LoginStatus = true,
                            Password = "B3791BBAC96A76010B24CC69D5B11C0866755659723F72E161D8E869EEBD5DC343DF310C8AAB52D8B9C4998F6932DC2AA4C2294C2735D818BE2F6C03F11ABA6F",
                            Salt = "d8963f7c-36ad-476a-9874-7762802ebd5b"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("desc");

                    b.Property<int>("LeaderId")
                        .HasColumnType("int")
                        .HasColumnName("leader_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id")
                        .HasName("PK_Teams");

                    b.HasIndex("LeaderId");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_name");

                    b.ToTable("teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Desc = "",
                            LeaderId = 4,
                            Name = "TEAM CS1"
                        },
                        new
                        {
                            Id = 2,
                            Desc = "",
                            LeaderId = 4,
                            Name = "TEAM PROG1"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.TeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("team_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_Team_Members");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("team_members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TeamId = 1,
                            UserId = 6
                        },
                        new
                        {
                            Id = 2,
                            TeamId = 1,
                            UserId = 8
                        },
                        new
                        {
                            Id = 3,
                            TeamId = 2,
                            UserId = 7
                        },
                        new
                        {
                            Id = 4,
                            TeamId = 2,
                            UserId = 9
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("image");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)")
                        .HasColumnName("salt");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK_Users");

                    b.HasIndex("Email")
                        .HasDatabaseName("idx_email");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 8, 5, 16, 21, 11, 414, DateTimeKind.Local).AddTicks(803),
                            Email = "adminsuper@epsylonhome.com",
                            FirstName = "Admin",
                            Image = "Users/adminsuper.jpg",
                            LastName = "Super",
                            Password = "63F6C1E4905D242AE2D67F1D0FE11686A93BF41CBA13D731B2846F84AD60826A6A56AA140D774167CB6A54C5E2722E009263BD5068583FE06996222DAA835902",
                            Salt = "d8963f7c-36ad-476a-9874-7762802ebd5b"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2021, 8, 5, 16, 21, 11, 415, DateTimeKind.Local).AddTicks(804),
                            Email = "managercs@epsylonhome.com",
                            FirstName = "Manager",
                            Image = "Users/managercs.jpg",
                            LastName = "CS",
                            Password = "AEC59A8733FD04AB43F50EBB53E731974F1BF3810DBBAB43FB41BC7A7FB3C50E34CE9573C457E9F201E1018BF4AFD0EB172C7AA455A9E298F53F9FC0C2186328",
                            Salt = "d8963f7c-36ad-476a-9874-7762802ebd5b"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2021, 8, 5, 16, 21, 11, 415, DateTimeKind.Local).AddTicks(804),
                            Email = "managerdev@epsylonhome.com",
                            FirstName = "Manager",
                            Image = "Users/managerdev.jpg",
                            LastName = "DEV",
                            Password = "7F5F3410C72E044BBF1AAF9E4E844D20465664A34A3E2FEC40C6AEC4DEE97C57B06A5EBC1059AEDDE272FA9FDFC29D2F34646AA9BC4EC9DC8DCF23FB0EED0887",
                            Salt = "d8963f7c-36ad-476a-9874-7762802ebd5b"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2021, 8, 5, 16, 21, 11, 415, DateTimeKind.Local).AddTicks(804),
                            Email = "teamleadcs@epsylonhome.com",
                            FirstName = "Teamlead",
                            Image = "Users/teamleadcs.jpg",
                            LastName = "CS",
                            Password = "B0D4E22452BF49BF4E62BE095B1CBDE5AD75DAE6EFE8BD0FBC5C805E1096AC0E734A22985AB24002378BB537EC228F9EC7AA3C9B1891213E13E09AFA2515CAF8",
                            Salt = "d8963f7c-36ad-476a-9874-7762802ebd5b"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2021, 8, 5, 16, 21, 11, 415, DateTimeKind.Local).AddTicks(804),
                            Email = "teamleaddev@epsylonhome.com",
                            FirstName = "Teamlead",
                            Image = "Users/teamleaddev.jpg",
                            LastName = "DEV",
                            Password = "F3E5E1034FDB094D2817C7BEFDCBA117BFE88D467B9D3FE4783D0D9D95E6842009E61988C237A649BAC7E8D96BE91A8515D25AB2007510C3F689AA03ECC4ABC2",
                            Salt = "d8963f7c-36ad-476a-9874-7762802ebd5b"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2021, 8, 5, 16, 21, 11, 415, DateTimeKind.Local).AddTicks(804),
                            Email = "ausercs1@epsylonhome.com",
                            FirstName = "AUser",
                            LastName = "CS1",
                            Password = "FEC2B15B18A15091D91E67971ADCAC76C1C6F6BE94E010162EAAB09C4BB89B6166E7D0C3A089BFA27170A4BFD60F60A75CFD5719C028FEA2251BDD762488FF6A",
                            Salt = "d8963f7c-36ad-476a-9874-7762802ebd5b"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2021, 8, 5, 16, 21, 11, 415, DateTimeKind.Local).AddTicks(804),
                            Email = "buserdev1@epsylonhome.com",
                            FirstName = "BUser",
                            LastName = "DEV1",
                            Password = "5014539BD8295164C15128F657424078F116A42CDCECC39B9899D4A36BF35AC9D1F75534BBD1CABC0DE199602BEAB334CBADEC92DE62A17F2C2A465168985064",
                            Salt = "d8963f7c-36ad-476a-9874-7762802ebd5b"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2021, 8, 5, 16, 21, 11, 415, DateTimeKind.Local).AddTicks(804),
                            Email = "cusercs2@epsylonhome.com",
                            FirstName = "CUser",
                            LastName = "CS2",
                            Password = "43899744D963D451C865A38B7B1E64210E5CC6E30E24950603AD95273D69EABCEFFCF2983C27D85FBB578E7F03B7A87B0D87D0D205396DB3B3BF83A90ACA695C",
                            Salt = "d8963f7c-36ad-476a-9874-7762802ebd5b"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2021, 8, 5, 16, 21, 11, 415, DateTimeKind.Local).AddTicks(804),
                            Email = "duserdev2@epsylonhome.com",
                            FirstName = "DUser",
                            LastName = "DEV2",
                            Password = "8EA57E6D9FC4F61A9C39E2B6F07E7CD7CBE8AEDC43887FDEDD0CFE3657A56F89AB576E586A544666FA24EB6E995BCD9B1A3999B2491AF5A41B0E35D15FED3E63",
                            Salt = "d8963f7c-36ad-476a-9874-7762802ebd5b"
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.UserDept", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("dept_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_UserDepts");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_userid");

                    b.ToTable("user_depatments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            DepartmentId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 5,
                            DepartmentId = 2,
                            UserId = 4
                        },
                        new
                        {
                            Id = 6,
                            DepartmentId = 3,
                            UserId = 5
                        },
                        new
                        {
                            Id = 7,
                            DepartmentId = 2,
                            UserId = 6
                        },
                        new
                        {
                            Id = 8,
                            DepartmentId = 3,
                            UserId = 7
                        },
                        new
                        {
                            Id = 9,
                            DepartmentId = 2,
                            UserId = 8
                        },
                        new
                        {
                            Id = 10,
                            DepartmentId = 3,
                            UserId = 9
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_UserRoles");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("idx_userid");

                    b.ToTable("user_roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            RoleId = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            RoleId = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 5,
                            RoleId = 3,
                            UserId = 4
                        },
                        new
                        {
                            Id = 6,
                            RoleId = 3,
                            UserId = 5
                        },
                        new
                        {
                            Id = 7,
                            RoleId = 4,
                            UserId = 6
                        },
                        new
                        {
                            Id = 8,
                            RoleId = 4,
                            UserId = 7
                        },
                        new
                        {
                            Id = 9,
                            RoleId = 4,
                            UserId = 8
                        },
                        new
                        {
                            Id = 10,
                            RoleId = 4,
                            UserId = 9
                        });
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.Media", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Tickets.TicketDetail", "TicketDetails")
                        .WithMany("Medias")
                        .HasForeignKey("TicketDetailsId");

                    b.HasOne("TicketingApi.Models.v1.Tickets.Ticket", "Tickets")
                        .WithMany("Medias")
                        .HasForeignKey("TicketsId");

                    b.Navigation("TicketDetails");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.Module", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Misc.App", null)
                        .WithMany("Modules")
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.Ticket", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Misc.App", "Apps")
                        .WithMany()
                        .HasForeignKey("AppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Misc.Module", "Modules")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.Sender", "Senders")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.HasOne("TicketingApi.Models.v1.Tickets.Stat", "Status")
                        .WithMany("Tickets")
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Apps");

                    b.Navigation("Modules");

                    b.Navigation("Senders");

                    b.Navigation("Status");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.TicketAssign", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Users.Team", "Teams")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("TicketingApi.Models.v1.Tickets.Ticket", null)
                        .WithMany("TicketAssigns")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Teams");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.TicketDetail", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Tickets.Ticket", null)
                        .WithMany("TicketDetails")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Team", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Users.User", "Leader")
                        .WithMany("Teams")
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.TeamMember", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Users.Team", "Teams")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.User", "Users")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teams");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.UserDept", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Users.Department", "Departments")
                        .WithMany("UserDepts")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.User", null)
                        .WithMany("UserDepts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.UserRole", b =>
                {
                    b.HasOne("TicketingApi.Models.v1.Users.Role", "Roles")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketingApi.Models.v1.Users.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Misc.App", b =>
                {
                    b.Navigation("Modules");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.Stat", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.Ticket", b =>
                {
                    b.Navigation("Medias");

                    b.Navigation("TicketAssigns");

                    b.Navigation("TicketDetails");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Tickets.TicketDetail", b =>
                {
                    b.Navigation("Medias");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Department", b =>
                {
                    b.Navigation("UserDepts");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.Team", b =>
                {
                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("TicketingApi.Models.v1.Users.User", b =>
                {
                    b.Navigation("TeamMembers");

                    b.Navigation("Teams");

                    b.Navigation("UserDepts");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
